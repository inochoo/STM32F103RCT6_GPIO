
STM32F103RCT6_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000238  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800041c  0800041c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800041c  0800041c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800041c  0800041c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800041c  0800041c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800041c  0800041c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000420  08000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000424  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000428  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000428  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f14  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004f8  00000000  00000000  00020f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c8  00000000  00000000  00021440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000180  00000000  00000000  00021608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001719c  00000000  00000000  00021788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001c27  00000000  00000000  00038924  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089274  00000000  00000000  0003a54b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c37bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000558  00000000  00000000  000c383c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000004 	.word	0x20000004
 8000200:	00000000 	.word	0x00000000
 8000204:	08000404 	.word	0x08000404

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000008 	.word	0x20000008
 8000220:	08000404 	.word	0x08000404

08000224 <SystemClockInit>:
#include<stm32f1xx.h>
void SystemClockInit()
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	RCC->CR |= 1<<0;
 8000228:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <SystemClockInit+0x34>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <SystemClockInit+0x34>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6013      	str	r3, [r2, #0]
	while((RCC->CR & (uint32_t)(1<<1)) == 0);
 8000234:	bf00      	nop
 8000236:	4b08      	ldr	r3, [pc, #32]	; (8000258 <SystemClockInit+0x34>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f003 0302 	and.w	r3, r3, #2
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0f9      	beq.n	8000236 <SystemClockInit+0x12>
	RCC->APB2ENR |= 1<<4;
 8000242:	4b05      	ldr	r3, [pc, #20]	; (8000258 <SystemClockInit+0x34>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a04      	ldr	r2, [pc, #16]	; (8000258 <SystemClockInit+0x34>)
 8000248:	f043 0310 	orr.w	r3, r3, #16
 800024c:	6193      	str	r3, [r2, #24]
}
 800024e:	bf00      	nop
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40021000 	.word	0x40021000

0800025c <GPIO_Init>:
void GPIO_Init()
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	GPIOC->CRL |= (1<<0) | (1<<4);
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <GPIO_Init+0x30>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a09      	ldr	r2, [pc, #36]	; (800028c <GPIO_Init+0x30>)
 8000266:	f043 0311 	orr.w	r3, r3, #17
 800026a:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~(3<<2) ;
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <GPIO_Init+0x30>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <GPIO_Init+0x30>)
 8000272:	f023 030c 	bic.w	r3, r3, #12
 8000276:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~(3<<6) ;
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <GPIO_Init+0x30>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a03      	ldr	r2, [pc, #12]	; (800028c <GPIO_Init+0x30>)
 800027e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	40011000 	.word	0x40011000

08000290 <delay>:
void delay(uint32_t time)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	while(time--);
 8000298:	bf00      	nop
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	1e5a      	subs	r2, r3, #1
 800029e:	607a      	str	r2, [r7, #4]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d1fa      	bne.n	800029a <delay+0xa>
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
	...

080002b0 <main>:

int main()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	SystemClockInit();
 80002b4:	f7ff ffb6 	bl	8000224 <SystemClockInit>
	GPIO_Init();
 80002b8:	f7ff ffd0 	bl	800025c <GPIO_Init>
	while(1)
	{
		GPIOC->BSRR |= 3<<0;
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <main+0x34>)
 80002be:	691b      	ldr	r3, [r3, #16]
 80002c0:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <main+0x34>)
 80002c2:	f043 0303 	orr.w	r3, r3, #3
 80002c6:	6113      	str	r3, [r2, #16]
		delay(720000);
 80002c8:	4807      	ldr	r0, [pc, #28]	; (80002e8 <main+0x38>)
 80002ca:	f7ff ffe1 	bl	8000290 <delay>
		GPIOC->BRR |= 3<<0;
 80002ce:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <main+0x34>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <main+0x34>)
 80002d4:	f043 0303 	orr.w	r3, r3, #3
 80002d8:	6153      	str	r3, [r2, #20]
		delay(720000);
 80002da:	4803      	ldr	r0, [pc, #12]	; (80002e8 <main+0x38>)
 80002dc:	f7ff ffd8 	bl	8000290 <delay>
		GPIOC->BSRR |= 3<<0;
 80002e0:	e7ec      	b.n	80002bc <main+0xc>
 80002e2:	bf00      	nop
 80002e4:	40011000 	.word	0x40011000
 80002e8:	000afc80 	.word	0x000afc80

080002ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002fc:	e7fe      	b.n	80002fc <HardFault_Handler+0x4>

080002fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000302:	e7fe      	b.n	8000302 <MemManage_Handler+0x4>

08000304 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000308:	e7fe      	b.n	8000308 <BusFault_Handler+0x4>

0800030a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800030e:	e7fe      	b.n	800030e <UsageFault_Handler+0x4>

08000310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr

0800031c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr

08000328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr

08000334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000338:	f000 f82e 	bl	8000398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}

08000340 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr

0800034c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800034c:	480c      	ldr	r0, [pc, #48]	; (8000380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800034e:	490d      	ldr	r1, [pc, #52]	; (8000384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000350:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000364:	4c0a      	ldr	r4, [pc, #40]	; (8000390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000372:	f7ff ffe5 	bl	8000340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000376:	f000 f821 	bl	80003bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037a:	f7ff ff99 	bl	80002b0 <main>
  bx lr
 800037e:	4770      	bx	lr
  ldr r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000384:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000388:	08000424 	.word	0x08000424
  ldr r2, =_sbss
 800038c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000390:	20000024 	.word	0x20000024

08000394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000394:	e7fe      	b.n	8000394 <ADC1_2_IRQHandler>
	...

08000398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <HAL_IncTick+0x1c>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <HAL_IncTick+0x20>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4413      	add	r3, r2
 80003a8:	4a03      	ldr	r2, [pc, #12]	; (80003b8 <HAL_IncTick+0x20>)
 80003aa:	6013      	str	r3, [r2, #0]
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	20000000 	.word	0x20000000
 80003b8:	20000020 	.word	0x20000020

080003bc <__libc_init_array>:
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	2500      	movs	r5, #0
 80003c0:	4e0c      	ldr	r6, [pc, #48]	; (80003f4 <__libc_init_array+0x38>)
 80003c2:	4c0d      	ldr	r4, [pc, #52]	; (80003f8 <__libc_init_array+0x3c>)
 80003c4:	1ba4      	subs	r4, r4, r6
 80003c6:	10a4      	asrs	r4, r4, #2
 80003c8:	42a5      	cmp	r5, r4
 80003ca:	d109      	bne.n	80003e0 <__libc_init_array+0x24>
 80003cc:	f000 f81a 	bl	8000404 <_init>
 80003d0:	2500      	movs	r5, #0
 80003d2:	4e0a      	ldr	r6, [pc, #40]	; (80003fc <__libc_init_array+0x40>)
 80003d4:	4c0a      	ldr	r4, [pc, #40]	; (8000400 <__libc_init_array+0x44>)
 80003d6:	1ba4      	subs	r4, r4, r6
 80003d8:	10a4      	asrs	r4, r4, #2
 80003da:	42a5      	cmp	r5, r4
 80003dc:	d105      	bne.n	80003ea <__libc_init_array+0x2e>
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003e4:	4798      	blx	r3
 80003e6:	3501      	adds	r5, #1
 80003e8:	e7ee      	b.n	80003c8 <__libc_init_array+0xc>
 80003ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003ee:	4798      	blx	r3
 80003f0:	3501      	adds	r5, #1
 80003f2:	e7f2      	b.n	80003da <__libc_init_array+0x1e>
 80003f4:	0800041c 	.word	0x0800041c
 80003f8:	0800041c 	.word	0x0800041c
 80003fc:	0800041c 	.word	0x0800041c
 8000400:	08000420 	.word	0x08000420

08000404 <_init>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr

08000410 <_fini>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr
